.\" Text automatically generated by txt2man
.TH anything-sync-daemon 1 "21 December 2014" "" ""
.SH NAME
\fBanything-sync-daemon \fP- Symlinks and syncs user specified dirs to RAM thus reducing HDD/SDD calls and speeding-up the system.
\fB
.SH DESCRIPTION
Anything-sync-daemon (asd) is a tiny pseudo-daemon designed to manage user specified directories referred to as sync targets from here on out, in tmpfs and to periodically sync them back to the physical disc (HDD/SSD). This is accomplished via a symlinking step and an innovative use of rsync to maintain synchronization between a tmpfs copy and media-bound backups. Additionally, asd features several crash recovery features.
.PP
Design goals of asd:
.RS
.IP \(bu 3
Completely transparent user experience.
.IP \(bu 3
Reduced wear to physical discs (particularly SSDs).
.IP \(bu 3
Speed.
.RE
.PP
Since the sync \fBtarget\fP(s) is relocated into tmpfs (RAM disk), the corresponding onslaught of I/O associated with system usage of them is also redirected from the physical disc to RAM, thus reducing wear to the physical disc and also improving speed and responsiveness. The access time of RAM is on the order of nanoseconds while the access time of physical discs is on the order of milliseconds. This is a difference of six orders of magnitude or 1,000,000 times faster.
.SH SETUP
/etc/asd.conf contains all user managed settings.
.PP
WARNING -- Any edits made to /etc/asd.conf while psd is running will be applied only after asd has been restarted from the init service.
.RS
.IP \(bu 3
At a minimum, define the sync \fBtarget\fP(s) to be managed by asd in the WHATTOSYNC array. Syntax below.
.IP \(bu 3
Optionally uncomment and define the location of your distro's tmpfs* in the VOLATILE variable.
.IP \(bu 3
Optionally enable the use of overlayfs to improve sync speed even further and use a smaller memory footprint. Do this in the USE_OVERLAYFS variable. Note that this option requires a Linux kernel version >=3.18.0. See the FAQ below for additional details on this feature.
.RE
.PP
*Note that the default value of "/dev/shm" should work just fine for the VOLATILE setting. Be aware that using software such as bleachbit with asd can be dangerous since bleachbit likes to remove files stored in /tmp. This is why a value of /dev/shm is recommended.
.PP
Example:
.PP
.nf
.fam C
 WHATTOSYNC=('/var/lib/monitorix' '/srv/http' '/foo/bar')
 or
 WHATTOSYNC=(
 '/var/lib/monitorix'
 '/srv/http'
 '/foo/bar'
 )

.fam T
.fi
.SH RUNNING ASD
.SS PREVIEW MODE
The preview (parse) option can be called to show users exactly what asd will do/is doing based on the entries in /etc/asd.conf.
.PP
.nf
.fam C
 $ asd p
 or
 $ anything-sync-daemon parse

.fam T
.fi
.SS START AND STOP ASD FOR SYSTEMD USERS
Both a systemd service file and timer are provided, and should be used to start or stop asd.
.PP
The role of the timer is update the tmpfs copies back to the disk. This occurs once per hour by default. The timer is started automatically with asd.service.
.PP
.nf
.fam C
 # systemctl [option] asd

.fam T
.fi
Available options:
.RS
.TP
.B
start
Turn on daemon.
.TP
.B
stop
Turn off daemon.
.TP
.B
enable
Autostart daemon on boot-up.
.TP
.B
disable
Don't autostart daemon on boot-up.
.SS  START AND STOP ASD FOR USERS OF OTHER INIT SYSTEMS
For distros not using systemd, another init script should be used to manage the daemon. An example is provided and is known to work with the following distros: Debian, Mint, and Ubuntu. Note that for these distros, the supplied cron script (installed to /etc/cron.hourly) will run the resync option to keep the tmpfs copies sync'ed. Of course, the target system must have cron installed and active for this to happen.
.PP
.nf
.fam C
 $ sudo /etc/init.d/asd [option]
 or
 $ sudo service asd [option]

.fam T
.fi
Available options:
.RS
.TP
.B
start
Turn on daemon.
.TP
.B
stop
Turn off daemon.
.RE
.PP
To have asd start/stop automatically, invoke update-rc.d:
.PP
.nf
.fam C
 $ sudo update-rc.d asd default

.fam T
.fi
To disable asd, invoke update-rc.d again:
.PP
.nf
.fam C
 $ sudo update-rc.d -f asd remove

.fam T
.fi
.SH SUPPORTED DISTROS
At this time, the following distros are officially supported but there is no reason to think that psd will not run on another distro:
.RS
.IP \(bu 3
Arch Linux
.IP \(bu 3
Chakra
.IP \(bu 3
Debian (6+)
.IP \(bu 3
Mint (14+)
.IP \(bu 3
Ubuntu (10.04+)
.SH FAQ
Q1: What is overlayfs and why do I want to use it?
.PP
A1: Overlayfs is a simple union file-system mainlined in the Linux kernel version 3.18.0. Starting with asd version 5.54, overlayfs can be used to reduce the memory footprint of asd's tmpfs space and to speed up sync and unsync operations. The magic is in how the overlay mount only writes out data that has changed rather than the entire directory. See Example 1 below. The same recovery features asd uses in its default mode are also active when running in overlayfs mode. Overlayfs mode is enabled by uncommenting the USE_OVERLAYFS="yes" line in /etc/asd.conf followed by a restart of the daemon.
.PP
Example 1: Below is an example running psd in parse mode on a system using overlayfs to illustrate the memory savings that can be achieved. Note the "overlayfs size" report compared to the total "dir size" report for each sync target. Be aware that these numbers will change depending on just how much data is written to the sync target, but in common use cases, the overlayfs size will always be less than the dir size. In the example given below this is not the case since monitorix using using a type of file that requires a total rewrite
.PP
Anything-sync-daemon v5.54 on Arch Linux.
.PP
.nf
.fam C
 Systemd service is currently active.
 Systemd resync service is currently active.
 Overlayfs technology is currently active.

.fam T
.fi
Asd will manage the following per /run/asd.conf settings:
.PP
.nf
.fam C
 owner/group id:     root/0
 target to manage:   /srv/http/serve
 sync target:        /srv/http/.serve-backup_asd
 tmpfs target:       /dev/shm/asd-root/srv/http/serve
 dir size:           21M
 overlayfs size:     15M

 owner/group id:     facade/100
 target to manage:   /home/facade/logs
 sync target:        /home/facade/.logs-backup_asd
 tmpfs target:       /dev/shm/asd-facadey/home/facade/logs
 dir size:           1.5M
 overlayfs size:     480K

.fam T
.fi
Q2: My system crashed and asd didn't sync back. What do I do?
.PP
A2: Odds are the "last good" backup of your sync \fBtarget\fP(s) is just fine still sitting happily on your filesystem. Upon restarting asd (on a reboot for example), a check is preformed to see if the symlink to the tmpfs copy of your sync target is valid. If it is invalid, asd will snapshot the "last good" backup before it rotates it back into place. This is more for a sanity check that asd did no harm and that any data loss was a function of something else.
.PP
Q3: Where can I find this snapshot?
.PP
A3: You will find the snapshot in the same directory as the sync target and it will contain a date-time-stamp that corresponds to the time at which the recovery took place. For example, a /foo/bar snapshot will be /foo/.bar-backup_asd-crashrecovery-20141221_070112 -- of course, the date_time suffix will be different for you.
.PP
Q4: How can I restore the snapshot?
.PP
A4: Follow these steps:
.RS
.IP 1. 4
Stop asd.
.IP 2. 4
Confirm that there is no symlink to the sync target. If there is, asd did not stop correctly for other reasons.
.IP 3. 4
Move the "bad" copy of the sync taget to a backup (don't blindly delete anything).
.IP 4. 4
Copy the snapshot directory to the expected sync target.
.PP
Example using /foo/bar
.IP 3. 4
mv /foo/bar /for/bar-bad
.IP 4. 4
cp \fB-a\fP /foo/.bar-backup_asd-crashrecovery-20141221_070112 /foo/bar
.RE
.PP
At this point, check that everything is fine with the data on /foo/bar and, if all is well, it is safe to delete the snapshot.
.SH CONTRIBUTE
Users wishing to contribute to this code, should fork and send a pull request. Source is freely available on the project page linked below.
.SH BUGS
Discover a bug? Please open an issue on the project page linked below.
.RS
.IP \(bu 3
Currently, asd cannot handle open files on a sync target so if a hung process has something open there, it can be messy.
.SH ONLINE
.IP \(bu 3
Project page: https://github.com/graysky2/anything-sync-daemon
.IP \(bu 3
Wiki page: https://wiki.archlinux.org/index.php/Anything-sync-daemon
.SH AUTHOR
graysky (graysky AT archlinux DOT us)
